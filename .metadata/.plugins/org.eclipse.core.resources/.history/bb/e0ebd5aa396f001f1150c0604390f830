package com.example.snowman.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.snowman.models.Buyer;
import com.example.snowman.models.Invoice;
import com.example.snowman.models.InvoiceDB;
import com.example.snowman.models.CompleteInvoice;
import com.example.snowman.models.Seller;
import com.example.snowman.services.InvoiceDBService;

@RestController
@RequestMapping("/snowman")
public class InvoiceController {
	
	    @Autowired
	    private InvoiceDBService invoiceDBService;
	    
	    @Autowired
	    private InvoiceDB invoiceDB;

	    @PostMapping("/invoice")
	    public ResponseEntity<String> createInvoice(@RequestBody CompleteInvoice payload) {
	    	
	        Seller seller = payload.getSeller();
	        Invoice invoice = payload.getInvoice();
	        Buyer buyer = payload.getBuyer();
	        
	        invoiceDB.setiNo(invoice.getiNo());
	        invoiceDB.setsName(seller.getsName());
	        invoiceDB.setsAddress(seller.getsAddress());
	        invoiceDB.setsCin(seller.getsCin());
	        invoiceDB.setsFscNo(seller.getsFscNo());
	        invoiceDB.setsGstin(seller.getsGstin());
	        invoiceDB.setsEmail(seller.getsEmail());
	        invoiceDB.setiDate(invoice.getiDate());
	        invoiceDB.setiEWayBillNo(invoice.getiEWayBillNo());
	        invoiceDB.setiModeTermsOfPayment(invoice.getiModeTermsOfPayment());
	        invoiceDB.setiBuyersOrderNo(invoice.getiBuyersOrderNo());
	        invoiceDB.setiBuyersOrderDate(invoice.getiBuyersOrderDate());
	        invoiceDB.setiDespatchDocumentNo(invoice.getiDespatchDocumentNo());
	        invoiceDB.setiDeliveryNoteDate(invoice.getiDeliveryNoteDate());
	        invoiceDB.setiDespatchedThrough(invoice.getiDespatchedThrough());
	        invoiceDB.setiDestination(invoice.getiDestination());
	        invoiceDB.setiDillOfLadingNo(invoice.getiDillOfLadingNo());
	        invoiceDB.setiMotorVehicleNo(invoice.getiMotorVehicleNo());
	        invoiceDB.setiTermsOfDelivery(invoice.getiTermsOfDelivery());
	        invoiceDB.setbName(buyer.getbName());
	        invoiceDB.setbAddress(buyer.getbAddress());
	        invoiceDB.setbPinCode(buyer.getbPinCode());
	        invoiceDB.setbGstin(buyer.getbGstin());
	        invoiceDB.setbStateName(buyer.getbStateName());
	        invoiceDB.setbCode(buyer.getbCode());
	        invoiceDB.setTotalValue(payload.getTotalValue());
	        invoiceDB.setTotalTaxableValue(payload.getTotalTaxableValue());
	        invoiceDB.setTotalIGST(payload.getTotalIGST());
	        invoiceDB.setTotalCGST(payload.getTotalCGST());
	        invoiceDB.setTotalSGST(payload.getTotalSGST());
	        invoiceDB.setTotalTax(payload.getTotalTax());
	        invoiceDB.setRoundOff(payload.getRoundOff());
	        invoiceDB.setTotalInvoiceValue(payload.getTotalInvoiceValue());
	        invoiceDB.setTaxAmountInWords(payload.getTaxAmountInWords());
	        invoiceDB.setAmountChargeableInWords(payload.getAmountChargeableInWords());
	        invoiceDB.setDeclaration(payload.getDeclaration());
	        invoiceDB.setIrn(payload.getIrn());
	        invoiceDB.setAckNo(payload.getAckNo());
	        invoiceDB.setAckDate(payload.getAckDate());
	        
	       	invoiceDBService.save(invoiceDB);
	       	
	       	return ResponseEntity.ok("Invoice created successfully");
	        
	    }
}
