package com.example.snowman.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.snowman.dto.CartonDTO;
import com.example.snowman.dto.CartonRequest;
import com.example.snowman.entities.CartonDB;
import com.example.snowman.entities.InvoiceDB;
import com.example.snowman.entities.PalletDB;
import com.example.snowman.services.CartonService;

@RestController
@RequestMapping("/snowman/carton")
public class CartonController {
	
    @Autowired
    private CartonService cartonService;

    @PostMapping("/addCartons")
    public ResponseEntity<String> addCartons(@RequestBody CartonRequest payload) {
    	
        try {
            PalletDB palletDB = cartonService.findPalletById(payload.getPalletID());
            if (palletDB == null) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid pallet ID");
            }
            
            InvoiceDB invoiceDB = cartonService.findInvoiceByNumber(payload.getInvoiceNumber());
            if (invoiceDB == null) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid invoice number");
            }
            
            for (CartonDTO cartonDTO : payload.getCartons()) {
                CartonDB cartonDB = new CartonDB();
                cartonDB.setDescriptionOfGoods(cartonDTO.getDescriptionOfGoods());
                cartonDB.setBatchNo(cartonDTO.getBatchNo());
                cartonDB.setMfgDate(cartonDTO.getMfgDate());
                cartonDB.setExpiryDate(cartonDTO.getExpiryDate());
                cartonDB.setWeight(cartonDTO.getWeight());
                cartonDB.setTemperature(cartonDTO.getTemperature());
                cartonDB.setRejected(cartonDTO.isRejected());
                cartonDB.setPalletDB(palletDB);
                cartonDB.setInvoiceDB(invoiceDB);

                cartonService.saveCarton(cartonDB);
            }

            return ResponseEntity.ok("Cartons added successfully");
        } 
        catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred while adding cartons");
        }
    }
}

